import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import '../utils/secure_storage.dart';

class AuthProvider with ChangeNotifier {
  static const String _baseUrl =
      "https://s3-4664.nuage-peda.fr/e52025/forum_api/public/api";
  String? _token;
  Map<String, dynamic>? _user;
  final SecureStorage _secureStorage = SecureStorage();

  /// ‚úÖ V√©rifie si l'utilisateur est connect√©
  bool get isAuthenticated => _token != null;
  String? get token => _token;
  Map<String, dynamic>? get user => _user;

  /// üîπ Connexion utilisateur
  Future<bool> login(String email, String password) async {
    final url = Uri.parse("$_baseUrl/authentication_token");
    final headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    };
    final body = jsonEncode({'email': email, 'password': password});

    try {
      final response = await http.post(url, headers: headers, body: body);
      print("üì° R√©ponse API Connexion : ${response.body}");

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        _token = responseData['token'];

        final data = responseData['data'];
        final userId = data['id'];

        // Sauvegarde du token
        await _secureStorage.saveToken(_token!);

        // Sauvegarde du userId
        await _secureStorage.saveUserId(userId.toString());

        // R√©cup√©ration des infos utilisateur apr√®s connexion
        await fetchUserProfile();

        notifyListeners();
        return true; // ‚úÖ Connexion r√©ussie
      } else {
        print("‚ö†Ô∏è √âchec de connexion : ${response.body}");
        return false;
      }
    } catch (e) {
      print("‚ùå Erreur connexion : $e");
      return false;
    }
  }

  /// üîπ Inscription utilisateur
  Future<bool> register(
      String pseudonyme, String email, String password) async {
    final url = Uri.parse("$_baseUrl/utilisateurs");
    final headers = {
      'Accept': 'application/ld+json',
      'Content-Type': 'application/ld+json',
    };
    final body = jsonEncode({
      'pseudonyme': pseudonyme,
      'email': email,
      'password': password,
      'dateInscription': DateTime.now().toIso8601String(),
    });

    try {
      final response = await http.post(url, headers: headers, body: body);
      print("üì° R√©ponse API Inscription : ${response.body}");

      if (response.statusCode == 201) {
        print("‚úÖ Inscription r√©ussie !");
        return true;
      } else {
        print("‚ö†Ô∏è √âchec de l'inscription : ${response.body}");
        return false;
      }
    } catch (e) {
      print("‚ùå Erreur Inscription : $e");
      return false;
    }
  }

  /// üîπ R√©cup√©rer les informations utilisateur apr√®s connexion
  Future<void> fetchUserProfile() async {
    if (_token == null) return;

    final url = Uri.parse("$_baseUrl/me");
    final headers = {
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    try {
      final response = await http.get(url, headers: headers);
      if (response.statusCode == 200) {
        _user = jsonDecode(response.body);
        print("üë§ Profil utilisateur r√©cup√©r√© : $_user");

        // Sauvegarde des informations utilisateur localement
        await _secureStorage.saveUserInfo(_user!['pseudonyme']);
      } else {
        print("‚ö†Ô∏è Impossible de r√©cup√©rer le profil : ${response.body}");
      }
    } catch (e) {
      print("‚ùå Erreur r√©cup√©ration profil : $e");
    }

    notifyListeners();
  }

  /// üîπ D√©connexion de l'utilisateur
  Future<void> logout() async {
    _token = null;
    _user = null;
    await _secureStorage.deleteCredentials();
    await _secureStorage.deleteUserInfo();
    notifyListeners();
  }

  /// üîπ Chargement du token et du profil au d√©marrage de l'application
  Future<void> loadSession() async {
    _token = await _secureStorage.readToken();
    if (_token != null) {
      await fetchUserProfile();
    }
    notifyListeners();
  }
}
